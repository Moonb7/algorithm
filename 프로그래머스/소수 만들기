function solution(nums) {
    let answer = 0;
    
    for(let i = 0; i < nums.length; i++) {
        for(let j = i + 1; j < nums.length; j++) {
            for(let k = j + 1; k < nums.length; k++) {
                let sum = nums[i] + nums[j] + nums[k];
                if(isPrime(sum)) {
                    // console.log(`${sum} = ${nums[i]} + ${nums[j]} + ${nums[k]}`);
                    answer++;
                }
            }
        }
    }
    return answer;
}

// 소수 구하는 공식 참고소수를 2부터 소수의 제곱근까지 나누었을때 나머지가 0이 나오면 false 소수가 아니고 전부 0이 아니면 true소수이다.
function isPrime(num) {
    let sqrt = Math.floor(Math.sqrt(num));
    for(let i = 2; i <= sqrt; i++) {
       if(num % i === 0) {
          return false;
       }
    }
    return true;
}

처음에 j 값에 1을 주고 k에 2로 초기화를 하면서 반복을 했습니다. 오우 answer에 값이 무진장 들어가더라구요. 그래서 아 i, j, k의 인덱스로 쓰이는 것들이 중복이 되면 안되겠다 싶어
if(i === j || i === k || j === k)
  break;
이러한 형태로 사용했습니다. 그래도 뭔가 계속 오류가나 Set도 써보고 하다가 아 j = i + 1을 하고 k = j + 1을 해주어 중복을 완전히 피해 해결했습니다.

다른 분들 풀이
오 대부분 다 비슷비슷 하게 풀었네요

