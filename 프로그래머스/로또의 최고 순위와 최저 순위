function solution(lottos, win_nums) {
    let answer = [];
    const ranking = {6 : 1, 5 : 2, 4 : 3, 3 : 4, 2 : 5, 1 : 6, 0 : 6};
    
    let zeroCount = 0;
    let matchCount = 0;
    
    for(let i = 0; i < lottos.length; i++) {
        if(lottos[i] === 0){
            zeroCount++;
        }
        for(let j = 0; j < lottos.length; j++) {
            if(lottos[i] === win_nums[j]){
                matchCount++;
            }
        }
    }
    answer.push(ranking[matchCount + zeroCount]); // 최고 순위
    answer.push(ranking[matchCount]); // 최저 순위
    //console.log(ranking[matchCount]);
    
    return answer;
}

다른 분들 풀이
1. 오 저랑 for문보다 filter함수를 이용하여 간단하게 풀이하셨네요
function solution(lottos, win_nums) {
    const rank = [6, 6, 5, 4, 3, 2, 1];

    let minCount = lottos.filter(v => win_nums.includes(v)).length;
    let zeroCount = lottos.filter(v => !v).length;

    const maxCount = minCount + zeroCount;

    return [rank[maxCount], rank[minCount]];
}

2. 하하 이렇게 직관적이게 푸신분들이 있어 가져와봤습니다. 가끔은 이렇게 직관적인 풀이에서 어떻게 코드를 정리해 나갈지 시작하는 것 같습니다. 그리고 저렇게 직관적인게 오히려 성능에 더 좋을 수 있을것 같네요
function solution(lottos, win_nums) {
    let answer = [];
    let max = 0;
    let min = 0;

    for (let lotto of lottos) {
        if (win_nums.includes(lotto)) {
            min++;
        }
        if (lotto === 0) {
            max++;
        }
    }

    switch (min + max) {
        case 6:
            answer.push(1);
            break;
        case 5:
            answer.push(2);
            break;
        case 4:
            answer.push(3);
            break;
        case 3:
            answer.push(4);
            break;
        case 2:
            answer.push(5);
            break;
        default:
            answer.push(6);
            break;
    }

    switch (min) {
        case 6:
            answer.push(1);
            break;
        case 5:
            answer.push(2);
            break;
        case 4:
            answer.push(3);
            break;
        case 3:
            answer.push(4);
            break;
        case 2:
            answer.push(5);
            break;
        default:
            answer.push(6);
            break;
    }

    return answer;
}

