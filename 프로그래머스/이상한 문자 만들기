function solution(s) {
    let answer = '';
    let strArray = s.split(' '); // 행렬같이 다차원 배열로 만들수도 있나? 음 일단ㄱ
    for(let i = 0; i < strArray.length; i++)
    {
        let wordArray = strArray[i].split(''); // 각 단어별로 또 배열을 만들어 준다.
        
        for(let j = 0; j < wordArray.length; j++) // 단어 배열요소마다 순서를 알수 있게 반복해준다.
        {
            if(j % 2 == 0)
            {
                wordArray[j] = wordArray[j].toUpperCase(); // 대문자 만들기
            }
            else
            {
                wordArray[j] = wordArray[j].toLowerCase(); // 소문자 만들기
            }
        }
        strArray[i] = wordArray.join(''); // 각 요소들 합쳐서 하나의 문자열을 만들어 단어 완성
    }
    
    console.log(strArray);
    answer = strArray.join(' '); // 각 단어별로 띄어쓰기 해서 문자열을 이루도록 했다.
    return answer;
}

다른 분들
function toWeirdCase(s){
  //함수를 완성해주세요
  return s.toUpperCase().replace(/(\w)(\w)/g, function(a){return a[0].toUpperCase()+a[1].toLowerCase();}) // 뭔가 정규식을 쓰면서 저는 아직 이게 더욱 어색하네요 아직 함수와 정규식에 대해 알아야 겠습니다.!
}
역시 GPT로 풀이로 보니 금방이해가 되네요 확실히 이게 짧게 써서 좋지만 성능면에서는 속도가 많이 느려 느린 부분은 도려내고 제 코드를 참고해서 고쳐서 쓸거 같네요 쓸일이 있다면요 하하
주요 부분 설명
s.toUpperCase():

s 문자열의 모든 문자를 대문자로 변환합니다.
예시: "try hello world"가 "TRY HELLO WORLD"로 변환됩니다.
.replace(/(\w)(\w)/g, function(a){ ... }):

이 부분은 정규표현식과 콜백 함수를 사용하여 문자열을 변환합니다.
정규표현식 (\w)(\w):
(\w)(\w):
\w는 단어 문자를 의미하며, [a-zA-Z0-9_]와 동일합니다.
(\w)(\w)는 두 개의 단어 문자를 그룹으로 캡처합니다.
정규표현식 내의 괄호 ()는 캡처 그룹을 만들며, 이 경우 첫 번째 \w는 첫 번째 그룹 (\w)에, 두 번째 \w는 두 번째 그룹 (\w)에 캡처됩니다.
예시: "TRY HELLO WORLD"는 "TR", "Y ", "HE", "LL", "O ", "WO", "RL", "D"로 매치됩니다.
g 플래그:
g는 글로벌 플래그로, 문자열 내의 모든 일치 항목을 찾습니다.
콜백 함수 function(a){ ... }:
매개변수 a:

a는 정규표현식과 일치한 문자열을 의미합니다. 즉, 매번 두 개의 단어 문자가 일치할 때마다 이 콜백 함수가 호출됩니다.
a[0].toUpperCase() + a[1].toLowerCase():

a[0]는 일치한 첫 번째 문자, a[1]는 일치한 두 번째 문자를 의미합니다.
첫 번째 문자는 대문자로 변환하고, 두 번째 문자는 소문자로 변환하여 합칩니다.
예시: "TR"은 "T", "R"로 분리되어 "Tr"로 변환됩니다.
전체 과정 예시:
입력 문자열: "try hello world"
모든 문자 대문자로 변환: "TRY HELLO WORLD"
정규표현식과 콜백 함수를 통해 변환:
"TR" → "Tr"
"Y " → "Y "
"HE" → "He"
"LL" → "Ll"
"O " → "O "
"WO" → "Wo"
"RL" → "Rl"
"D" → "D" (변환되지 않음, 홀수 개수의 문자는 그대로 유지)
최종 결과: "TrY HeLlO WoRlD"
이제 toWeirdCase 함수는 주어진 문자열을 위의 규칙에 따라 변환합니다.


c#
 public static string Solution(string s)
    {
        string answer = "";
        string[] strArray = s.Split(' '); // 단어를 공백 기준으로 나눕니다.
        
        for (int i = 0; i < strArray.Length; i++)
        {
            char[] wordArray = strArray[i].ToCharArray(); // 각 단어를 문자 배열로 나눕니다.
            
            for (int j = 0; j < wordArray.Length; j++)
            {
                if (j % 2 == 0)
                {
                    wordArray[j] = Char.ToUpper(wordArray[j]); // 짝수 인덱스는 대문자로 변환하여 저장합니다.
                }
                else
                {
                    wordArray[j] = Char.ToLower(wordArray[j]); // 홀수 인덱스는 소문자로 변환하여 저장합니다.
                }
            }
            strArray[i] = new string(wordArray); // 변환된 문자를 합쳐서 단어로 만듭니다.
        }
        
        answer = string.Join(" ", strArray); // 단어들을 합쳐서 문장을 만듭니다.
        return answer;
    }
}
